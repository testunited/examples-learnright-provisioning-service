buildscript {
    repositories {
      mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.6.4"
        classpath "com.palantir.gradle.docker:gradle-docker:0.32.0"     
        classpath "org.springframework.cloud:spring-cloud-contract-gradle-plugin:3.1.0"
    }
}

plugins {
	id 'org.springframework.boot' version '2.6.4'
	id 'java'
	id 'com.palantir.docker' version '0.32.0'
	id 'jacoco'
	id 'maven-publish'
	id 'com.adarshr.test-logger' version '3.2.0'	
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'spring-cloud-contract'
apply plugin: "com.palantir.docker"

ext {
	 springCloudVersion = "Greenwich.SR1"
	 companyName = 'testunited.org'
}

group = 'org.testunited.examples.learnright.provisioning'
version = '0.0.1'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	all {
		exclude group: 'junit', module: 'junit'
	}
}

repositories {
	mavenLocal()
	mavenCentral()
}

dependencyManagement {
    imports {
      mavenBom "org.springframework.cloud:spring-cloud-contract-dependencies:3.1.1"
    }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'org.springframework.cloud:spring-cloud-contract-stub-runner:3.1.1'
    runtimeOnly 'org.apache.derby:derby'
    runtimeOnly 'mysql:mysql-connector-java'
    testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
    	exclude group: 'junit', module: 'junit' //by both name and group
    }	    
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.8.2'
	testRuntimeOnly 'org.testunited:testunited-api:0.0.3'
}

contracts {
	packageWithBaseClasses "org.testunited.examples.learnright.provisioning.test.contract"
	testFramework = 'JUNIT5'
}

jacoco {
    toolVersion = "0.8.7"
    reportsDirectory = file("$buildDir/jacoco")
}

jacocoTestReport {
    reports {
        html.destination file("${buildDir}/jacocoHtml")
    }
}

docker {
    name "testunited/examples-learnright-provisioning:latest"
    files jar.archivePath
    copySpec.from("build/libs").into(".")
    buildArgs(['JAR_FILE': "${bootJar.archiveFileName.get()}"])
}
dockerPrepare{
    duplicatesStrategy = 'exclude'
    dependsOn = [bootJar, jar, verifierStubsJar]
}
test {
    useJUnitPlatform()
    systemProperty "testunited.testsession.name", System.getProperty("testunited.testsession.name")
}

task runJar(group: "Run", description: "Runs the Jar built by the 'build' task", type: JavaExec) {
    dependsOn = [build, test]
    mainClass = "-jar";
    args jar.archivePath
}

sourceSets {
    test {
        java {
            srcDir 'build/generated-test-sources/contracts'
        }
    }
}

task bootJarVersion{
    doLast {
    	println bootJar.version
  }
}